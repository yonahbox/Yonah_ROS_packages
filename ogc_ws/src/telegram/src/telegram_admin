#!/usr/bin/env python3

# Copyright (C) 2020 Rumesh Sudhaharan

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pathlib import Path
import json
import time

from Td import Td
from identifiers import Identifiers
from syncthing import Syncthing

home_dir = str(Path.home())
tdlib_dir = home_dir + '/.tdlib_admin'
identifiers_file = home_dir + '/Sync/identifiers.json'
self_id = home_dir + '/.self_id'

if __name__ == '__main__':
	td = Td(tdlib_dir)
	ids = Identifiers(identifiers_file, True, self_id, None)
	st = Syncthing()
	boot_time = time.time()

	id_waitlist = {}

	while True:
		event = td.receive()
		if event:
			if event['@type'] == 'error':
				print(f"[ERROR] {json.dumps(event)}")
				td.get_chats()

			if event['@type'] == 'updateNewMessage':
				if event['message']['is_outgoing'] or event['message']['date'] < boot_time:
					continue

				is_valid_sender = ids.is_valid_sender(0, str(event['message']['sender_user_id']))
				if not is_valid_sender:
					print(f"invalid sender: {event['message']['sender_user_id']}")
					print("message from invalid user")
					continue

				msg = event['message']['content']['text']['text']
				print(f"New Message: {msg}")
				td.set_read(event['message']['chat_id'], event['message']['id'])
				try:
					msg_json = json.loads(msg)

					if msg_json['request'] == 'set_gcs':
						for air_id in msg_json['air_ids']:
							telegram_id = ids.get_air_telegram_id(air_id)
							command_msg = {
								'request': 'set_gcs_id',
								'ground_ids': msg_json['ground_ids']
							}
							td.create_chat(telegram_id)
							td.send_message(telegram_id, json.dumps(command_msg))
					elif msg_json['request'] in ['add','edit']:
						# print(msg_json)
						print(f"adding contact {msg_json['number']} {msg_json['label']} ")

						id_waitlist[msg_json['number']] = msg_json
						td.add_contact(msg_json['number'], msg_json['label'])
						time.sleep(1)
						td.get_contacts()
					elif msg_json['request'] == 'add_syncthing':
						dev = ids.get_device_details(msg_json["device_id"], msg_json["is_air"])
						dev.syncthing_id = msg_json["syncthing_id"]
						ids.edit_device(dev.to_json())

						st.add_device(dev.syncthing_id, dev.label)

				except json.JSONDecodeError:
					print('invalid message format')
					continue

			if event['@type'] == 'user':
				dev = id_waitlist.pop(event['phone_number'], None)
				if not dev:
					continue

				print(f"Got id {event['id']} for {event['phone_number']}")
				dev['telegram_id'] = event['id']

				dev_id = 0
				if dev.get('request') == 'edit':
					ids.edit_device(dev)
				elif dev.get('request') == 'add':
					dev_id = ids.add_new_device(dev)

					msg = {
						"request": "init_device",
						"device_id": dev_id,
						"is_air": dev["is_air"],
						"admin_syncthing_id": st.get_id()
					}
					td.create_chat(event['id'])
					time.sleep(1)
					td.send_message(event['id'], json.dumps(msg))